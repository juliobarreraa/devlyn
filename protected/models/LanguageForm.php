<?php

/**
 * Propiedades y metodos para renderizar el formulario.
 * 
 * $Source$
 * $File$
 * @version $Id$
 * @license http://www.codebit.org/licence
 * @copyright Copyright (c) 2013, Julio Barrera & Jefferson Arrubla
 * @author   $Author$
 * @since   # $Date$
*/
class LanguageForm extends CFormModel {
	/**
	 * Arreglo con las propiedades a las que tiene acceso el objeto
	 * @var array
	 */
	private $propertys;

	/**
	 * Inicializa las propiedades del objeto Languageform
	 * @param array $propertys Colección de propiedades
	 */
	public function __construct($propertys) {
		$this->propertys = $propertys;
	}

	/**
	 * Configura propiedades de forma dinámica
	 * @param string $name  Nombre de la propiedad
	 * @param string $value Valor de la propiedad
	 */
	public function __set($name, $value) {
		$name = CHtml::decode(@Helpers::decrypt($name));

		if($name == '') return;

		if(isset($this->propertys[$name])) $this->propertys[$name] = $value;
		else throw new Exception(Yii::t('error', 'La propiedad {{property}} no existe', array('{{property}}' => $name)));
	}

	/**
	 * Obtiene el valor de una propiedad
	 * @param  string $name Nombre de la propiedad
	 * @return object
	 */
	public function __get($name) {

	}

	/**
	 * Declares attribute labels.
	 */
	public function attributeLabels()
	{
		return array(
		);
	}

	/**
	 * Devuelve el nuevo arreglo de datos.
	 * @return string
	 */
	public function getTranslate() {
		return $this->propertys;
	}

	/**
	 * Refresca el contenido de la cache para almacenar los datos modificados
	 * @param  string $name Nombre de la clave cache a modificar
	 */
	public function saveToCache($name) {
		Yii::app()->cache->set('language.read.' . $name, $this->propertys);
	}

	/**
	 * Obtiene el contenido de la cache para guardarlo en el fichero
	 * @param  string $rootDir Nombre del fichero
	 */
	public function save($rootDir){
		$cache = '';
		foreach ($this->propertys as $key => $value) {
			$cache .= "\t'$key' => '$value',\n";
		}

		$output = <<<EOF
<?php
/**
 * Message translations.
 *
 * This file is automatically generated by 'yiic message' command.
 * It contains the localizable messages extracted from source code.
 * You may modify this file by translating the extracted messages.
 *
 * Each array element represents the translation (value) of a message (key).
 * If the value is empty, the message is considered as not translated.
 * Messages that no longer need translation will have their translations
 * enclosed between a pair of '@@' marks.
 *
 * Message string can be used with plural forms format. Check i18n section
 * of the guide for details.
 *
 * NOTE, this file must be saved in UTF-8 encoding.
 */
return array (
{$cache}
);
EOF;

		$file = new globalcms\components\utils\Files;
		if (!($file->bufferToSave($rootDir, $output, null, null, true))) return false;

		return true;
	}
}